{"version":3,"sources":["webpack:///./index.js"],"names":["inputCountry","document","querySelector","addEventListener","debounce","ev","target","value","fetch","then","res","json","hasOwnProperty","status","PNotify","closeAll","nextSibling","remove","error","title","text","countries","map","elem","length","language","country","languages","name","join","countryCard","createElement","insertAdjacentHTML","capital","population","flag","after","outputCountryCard","listCountries","countriesList","outputCountries","catch","er"],"mappings":"oOAMMA,G,UAAeC,SAASC,cAAc,WAwE5CF,EAAaG,iBAAiB,QAASC,KA7BnB,SAAAC,GAClBA,EAAGC,OAAOC,OACRC,MAAM,yCAAyCH,EAAGC,OAAOC,OACtDE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ,GAAIA,EAAIE,eAAe,WAA4B,MAAfF,EAAIG,OACtCC,IAAQC,WACRf,EAAagB,aAAehB,EAAagB,YAAYC,SACrDH,IAAQI,MAAM,CACZC,MAAO,GACPC,KAAM,2BAEH,CACLN,IAAQC,WACR,IAAMM,EAAYX,EAAIY,KAAI,SAAAC,GAAI,OAAIA,KACT,IAArBF,EAAUG,OAzDE,SAAC,GAAc,IAEnCC,EAFsBC,EAAa,KACvC1B,EAAagB,aAAehB,EAAagB,YAAYC,SAGnDQ,EADEC,EAAQC,UAAUH,OAAS,EAClB,kBAAkBE,EAAQC,UAClCL,KAAI,2BAAGM,KAAH,WACJC,KAAK,IAFA,QAIG,gBAAgBH,EAAQC,UAAU,GAAGC,KAAxC,OAGV,IAAME,EAAc7B,SAAS8B,cAAc,OAC3CD,EAAYE,mBACV,aADF,OAESN,EAAQE,KAFjB,+DAKiBF,EAAQO,QALzB,6BAMoBP,EAAQQ,WAN5B,eAOMT,EAPN,mCASgBC,EAAQS,KATxB,gCAYAnC,EAAaoC,MAAMN,GAkCTO,CAAkBhB,GAhCN,SAAAA,GACtB,IAAMiB,EAAgBjB,EAAUC,KAAI,SAAAC,GAAI,aAAWA,EAAKK,KAAhB,WAA6BC,KAAK,IAQ1E,GAPA7B,EAAagB,aAAehB,EAAagB,YAAYC,SACjDI,EAAUG,OAAS,IACrBV,IAAQI,MAAM,CACZC,MAAO,GACPC,KAAM,gEAGNC,EAAUG,QAAU,GAAKH,EAAUG,QAAU,GAAI,CACnDxB,EAAagB,aAAehB,EAAagB,YAAYC,SACrD,IAAMsB,EAAgBtC,SAAS8B,cAAc,MAC7CQ,EAAcP,mBAAmB,aAAcM,GAC/CtC,EAAaoC,MAAMG,IAoBNC,CAAgBnB,OAG1BoB,OAAM,SAAAC,GACL5B,IAAQC,WACRf,EAAagB,aAAehB,EAAagB,YAAYC,SACrDH,IAAQI,MAAM,CACZC,MAAO,GACPC,KAAM,GAAGsB,SAI0C,Q","file":"main.c7760785294d8ce7acb0.js","sourcesContent":["import './styles.css';\r\nimport 'pnotify/dist/PNotifyBrightTheme.css';\r\nimport debounce from 'lodash.debounce';\r\nimport PNotify from 'pnotify/dist/es/PNotify.js';\r\nimport PNotifyButtons from 'pnotify/dist/es/PNotifyButtons.js';\r\n\r\nconst inputCountry = document.querySelector('.input');\r\nconst outputCountryCard = ([country]) => {\r\n  inputCountry.nextSibling && inputCountry.nextSibling.remove();\r\n  let language;\r\n  if (country.languages.length > 1) {\r\n    language = `<ul> Languages:${country.languages\r\n      .map(({ name }) => `<li>${name}</li>`)\r\n      .join('')}</ul>`;\r\n  } else {\r\n    language = `<p>Languages:${country.languages[0].name}</p>`;\r\n  }\r\n\r\n  const countryCard = document.createElement('div');\r\n  countryCard.insertAdjacentHTML(\r\n    'afterbegin',\r\n    `<h1>${country.name}</h1>\r\n  <div class=countryInfo>\r\n  <div>\r\n      <p>Capital:${country.capital}</p>\r\n      <p>Population:${country.population}</p>\r\n      ${language}\r\n      </div>\r\n      <img src=\"${country.flag}\" width=\"200\">\r\n      </div>`,\r\n  );\r\n  inputCountry.after(countryCard);\r\n};\r\nconst outputCountries = countries => {\r\n  const listCountries = countries.map(elem => `<li>${elem.name}</li>`).join('');\r\n  inputCountry.nextSibling && inputCountry.nextSibling.remove();\r\n  if (countries.length > 10) {\r\n    PNotify.error({\r\n      title: '',\r\n      text: 'Too many matches found. Please enter a more specific query!',\r\n    });\r\n  }\r\n  if (countries.length >= 2 && countries.length <= 10) {\r\n    inputCountry.nextSibling && inputCountry.nextSibling.remove();\r\n    const countriesList = document.createElement('ul');\r\n    countriesList.insertAdjacentHTML('afterbegin', listCountries);\r\n    inputCountry.after(countriesList);\r\n  }\r\n};\r\nconst findCountry = ev => {\r\n  ev.target.value &&\r\n    fetch(`https://restcountries.eu/rest/v2/name/${ev.target.value}`)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.hasOwnProperty('status') && res.status === 404) {\r\n          PNotify.closeAll();\r\n          inputCountry.nextSibling && inputCountry.nextSibling.remove();\r\n          PNotify.error({\r\n            title: '',\r\n            text: 'No correct request',\r\n          });\r\n        } else {\r\n          PNotify.closeAll();\r\n          const countries = res.map(elem => elem);\r\n          if (countries.length === 1) {\r\n            outputCountryCard(countries);\r\n          } else outputCountries(countries);\r\n        }\r\n      })\r\n      .catch(er => {\r\n        PNotify.closeAll();\r\n        inputCountry.nextSibling && inputCountry.nextSibling.remove();\r\n        PNotify.error({\r\n          title: '',\r\n          text: `${er}`,\r\n        });\r\n      });\r\n};\r\ninputCountry.addEventListener('input', debounce(findCountry, 500));\r\n"],"sourceRoot":""}